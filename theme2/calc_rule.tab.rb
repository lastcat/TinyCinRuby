#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'
class TinyCC < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
     6,     7,     9,     4,     8,     5,     4,     4,     4 ]

racc_action_check = [
     3,     3,     5,     0,     4,     1,     6,     7,     8 ]

racc_action_pointer = [
    -2,     5,   nil,    -3,     2,     2,     1,     2,     3,   nil,
   nil,   nil,   nil ]

racc_action_default = [
    -7,    -7,    -1,    -2,    -5,    -7,    -7,    -7,    -7,    13,
    -3,    -4,    -6 ]

racc_goto_table = [
     2,     1,    12,   nil,   nil,   nil,    10,    11 ]

racc_goto_check = [
     2,     1,     3,   nil,   nil,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,     1,     0,    -6 ]

racc_goto_default = [
   nil,   nil,   nil,     3 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 7, :_reduce_1,
  1, 8, :_reduce_2,
  3, 8, :_reduce_3,
  3, 8, :_reduce_4,
  1, 9, :_reduce_5,
  3, 9, :_reduce_6 ]

racc_reduce_n = 7

racc_shift_n = 13

racc_token_table = {
  false => 0,
  :error => 1,
  "*" => 2,
  "+" => 3,
  "-" => 4,
  :NUMBER => 5 }

racc_nt_base = 6

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"*\"",
  "\"+\"",
  "\"-\"",
  "NUMBER",
  "$start",
  "program",
  "expr",
  "mult_expr" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'calc_rule.y', 13)
  def _reduce_1(val, _values, result)
    puts val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'calc_rule.y', 14)
  def _reduce_2(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'calc_rule.y', 15)
  def _reduce_3(val, _values, result)
    result = val[0] + val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'calc_rule.y', 16)
  def _reduce_4(val, _values, result)
    result =val[0] - val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'calc_rule.y', 17)
  def _reduce_5(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'calc_rule.y', 18)
  def _reduce_6(val, _values, result)
    result = val[0] * val[2]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class TinyCC
